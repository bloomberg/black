# Extended grammar for 2to3. This grammar has been extended to support Cython.

# NOTE WELL: You should also follow all the steps listed at
# https://devguide.python.org/grammar/

# Start symbols for the grammar:
#	file_input is a module or sequence of commands read from an input file;
#	single_input is a single interactive statement;
#	eval_input is the input for the eval() and input() functions.
# NB: compound_stmt in single_input is followed by extra NEWLINE!
file_input: (NEWLINE | stmt)* ENDMARKER
single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
eval_input: testlist NEWLINE* ENDMARKER

decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef | async_funcdef | cdef_stmt)
async_funcdef: ASYNC funcdef
funcdef: 'def' NAME parameters ['->' test] ':' suite
parameters: '(' [typedargslist] ')'
typedargslist: ((tfpdef ['=' test] ',')*
                ('*' [tname] (',' tname ['=' test])* [',' ['**' tname [',']]] | '**' tname [','])
                | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
tname: NAME [':' test]
tfpdef: tname | '(' tfplist ')'
tfplist: tfpdef (',' tfpdef)* [',']
varargslist: ((vfpdef ['=' test] ',')*
              ('*' [vname] (',' vname ['=' test])*  [',' ['**' vname [',']]] | '**' vname [','])
              | vfpdef ['=' test] (',' vfpdef ['=' test])* [','])
vname: NAME
vfpdef: vname | '(' vfplist ')'
vfplist: vfpdef (',' vfpdef)* [',']

stmt: simple_stmt | compound_stmt
simple_stmt: (DEF_stmt | include_stmt | small_stmt (';' small_stmt)* [';']) NEWLINE
small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | exec_stmt | assert_stmt)
expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist_star_expr))*)
annassign: ':' test ['=' test]
testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
# For normal and annotated assignments, additional restrictions enforced by the interpreter
print_stmt: 'print' ( [ test (',' test)* [','] ] |
                      '>>' test [ (',' test)+ [','] ] )
del_stmt: 'del' exprlist
pass_stmt: 'pass'
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [testlist]
yield_stmt: yield_expr
raise_stmt: 'raise' [test ['from' test | ',' test [',' test]]]
import_stmt: import_name | import_from
import_name: ('cimport'|'import') dotted_as_names
import_from: ('from' ('.'* dotted_name | '.'+)
              ('cimport'|'import') ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
global_stmt: ('global' | 'nonlocal') NAME (',' NAME)*
exec_stmt: 'exec' expr ['in' test [',' test]]
assert_stmt: 'assert' test [',' test]
DEF_stmt: 'DEF' NAME '=' testlist
include_stmt: 'include' STRING

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt | ctypedef_stmt | cdef_stmt | IF_stmt
async_stmt: ASYNC (funcdef | with_stmt | for_stmt)
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite ['else' ':' suite]
for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
try_stmt: ('try' ':' suite
           ((except_clause ':' suite)+
	    ['else' ':' suite]
	    ['finally' ':' suite] |
	   'finally' ':' suite))
with_stmt: 'with' with_item (',' with_item)*  ':' suite
IF_stmt: 'IF' testlist ':' suite ('ELIF' testlist ':' suite)* ['ELSE' ':' suite]
cdef_stmt: ('cdef'|'cpdef') ['public' | 'extern' | 'readonly'] ['api'] inline_cdef_stmt
ctypedef_stmt: 'ctypedef' ['public' | 'extern' | 'readonly'] ['api'] (cclassdef | enumdef | struct_uniondef | fuseddef | typed_decl)
with_item: test ['as' expr]
with_var: 'as' expr
# NB compile.c makes sure that the default except clause is last
except_clause: 'except' [test [(',' | 'as') test]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

cdef_suite: cdef_suite_item | NEWLINE INDENT cdef_suite_item+ DEDENT
cdef_suite_item: ctypedef_stmt | DEF_stmt NEWLINE | IF_stmt | [decorators] ['cdef'|'cpdef'] inline_cdef_stmt
inline_cdef_stmt: pass_stmt NEWLINE | enumdef | struct_uniondef | fuseddef | cdef_block | cdef_extern_block | cclassdef | cppclassdef | typed_decl
enumdef: 'enum' [NAME [STRING]] ':' enum_suite
enum_suite: enum_line | NEWLINE INDENT enum_line+ DEDENT
enum_line: (pass_stmt | enum_item (',' enum_item)* [',']) NEWLINE
enum_item: NAME [STRING] ['=' test]
cdef_block: ['nogil'] ':' cdef_suite
cdef_extern_block: ['import'] 'from' ('*' | STRING) ['namespace' STRING] ['nogil'] ':' cdef_suite
cclassdef: ('class' dotted_name ['as' NAME]
            ['(' [arglist] ')'] ['[' [c_class_options] ']']
            (NEWLINE | ':'  suite))
c_class_options: c_class_option (',' c_class_option)* [',']
c_class_option: ('object' | 'type' | 'check_size') NAME
struct_uniondef: (['packed'] 'struct' | 'union') NAME [STRING] (NEWLINE | ':' struct_uniondef_suite)
struct_uniondef_suite: NEWLINE INDENT (pass_stmt NEWLINE | typed_decl)+ DEDENT
fuseddef: 'fused' NAME ':' fuseddef_suite
fuseddef_suite: NEWLINE INDENT ((pass_stmt | type) NEWLINE)+ DEDENT

templatedef: NAME ['=' '*']
cppclassdef: 'cppclass' cppclassdef_body
cppclassdef_body: (NAME [STRING] ['[' templatedef (',' templatedef)* ']']
                                ['(' type (',' type)* ')']
                                ['nogil']
                                (NEWLINE | ':' cppclass_suite))
cppclass_suite: NEWLINE INDENT (pass_stmt NEWLINE | cppclass_attrib)* DEDENT
cppclass_attrib: [decorators] (cppclassdef | ('struct' | 'union') cppclassdef_body | ctypedef_stmt | enumdef | typed_decl)

signedness: 'unsigned' | 'signed'
longness: 'short' | 'long'
basic_c_typenames: 'void' | 'char' | 'int' | 'float' | 'double' | 'bint'
basic_c_type: (signedness | longness)+ [basic_c_typenames] ['complex'] | basic_c_typenames ['complex'] | 'complex'

ctuple_type: '(' type (',' type)* [','] ')'
simple_type: ['const'] (dotted_name | basic_c_type | ctuple_type) [type_qualifiers]
nested_type_quals: '(' (type_qualifiers [nested_type_quals] | nested_type_quals) ')'
type: simple_type [nested_type_quals func_decl]

named_nested_type_quals: '(' (type_qualifiers named_nested_type_quals | named_nested_type_quals) ')' | NAME [STRING] [array_declarator]
maybe_typed_name_arg: simple_type ([NAME [':' test] | named_nested_type_quals func_decl] | [':' test]) ['=' (test | '*')] # HACK: This is meant to be (type [IDENTIFIER] | IDENTIFIER), kinda similar to the "test ['=' test]" hack
cfunc_args: maybe_typed_name_arg (',' maybe_typed_name_arg)* [','] ['.' '.' '.']
exception_value_clause: 'except' ('*' | '+' [NAME | '*'] | ['?'] test)
func_decl: ('(' [type_qualifiers named_nested_type_quals | cfunc_args] ')')+ ['nogil'] [exception_value_clause] ['with' 'gil'] ['const']

typed_decl: ['inline'] simple_type (['=' test] typed_decl_rest |  # Type is implicit
                                    func_decl (':' suite | typed_decl_rest) |  # C++ constructors or function pointers
                                    (NAME [STRING] | cpp_operator) [array_declarator] (func_decl (':' suite | typed_decl_rest) |
                                                                                       ['=' test] typed_decl_rest))
typed_decl_rest: (',' [type_qualifiers] named_nested_type_quals [func_decl] ['=' test])* [','] NEWLINE
cpp_operator: 'operator' ['+'['+'] | '-'['-'] | '*' | '/' | '%' |
                          '~' | '|'['|'] | '&'['&'] | '^' | '<<' | '>>' |
                          '==' | '!=' | '<=' | '<' | '>=' | '>' |
                          '=' | '!' | ',' |
                          '[' ']' | '(' ')' | 'bool']

type_qualifiers: type_qualifier+
type_qualifier: ('*' | '**' | '&') ['const'] | type_index ('.' NAME [type_index])*
# TODO: old buffer syntax
array_declarator: '[' testlist ']'
type_index: '[' [(NUMBER | type (',' type)* | (memory_view_index (',' memory_view_index)*))] ']'
memory_view_index: ':' [':'] [NUMBER]

# Backward compatibility cruft to support:
# [ x for x in lambda: True, lambda: False if x() ]
# even while also allowing:
# lambda x: 5 if x else 2
# (But not a mix of the two)
testlist_safe: old_test [(',' old_test)+ [',']]
old_test: or_test | old_lambdef
old_lambdef: 'lambda' [varargslist] ':' old_test

test: or_test ['if' or_test 'else' test] | lambdef
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
star_expr: '*' expr
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'@'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~'|'&'|typecast) factor | sizeof_expr | power
typecast: '<' type ['?'] '>'
sizeof_expr: 'sizeof' '(' type ')'
power: [AWAIT] atom trailer* ['**' factor] | new_expr
new_expr: 'new' simple_type '(' [arglist] ')'
atom: ('(' [yield_expr|testlist_gexp] ')' |
       '[' [listmaker] ']' |
       '{' [dictsetmaker] '}' |
       '`' testlist1 '`' |
       NAME | NUMBER | STRING+ | '.' '.' '.')
listmaker: (test|star_expr) ( old_comp_for | (',' (test|star_expr))* [','] )
testlist_gexp: (test|star_expr) ( old_comp_for | (',' (test|star_expr))* [','] )
lambdef: 'lambda' [varargslist] ':' test
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: test | [test] ':' [test] [sliceop]
sliceop: ':' [test]
exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
testlist: test (',' test)* [',']
dictsetmaker: ( ((test ':' test | '**' expr)
                 (comp_for | (',' (test ':' test | '**' expr))* [','])) |
                ((test | star_expr)
		 (comp_for | (',' (test | star_expr))* [','])) )

classdef: 'class' NAME ['(' [arglist] ')'] ':' suite

arglist: argument (',' argument)* [',']

# "test '=' test" is really "keyword '=' test", but we have no such token.
# These need to be in a single rule to avoid grammar that is ambiguous
# to our LL(1) parser. Even though 'test' includes '*expr' in star_expr,
# we explicitly match '*' here, too, to give it proper precedence.
# Illegal combinations and orderings are blocked in ast.c:
# multiple (test comp_for) arguments are blocked; keyword unpackings
# that precede iterable unpackings are blocked; etc.
argument: ( test [comp_for] |
            test '=' test |
	    '**' test |
            '*' test )

comp_iter: comp_for | comp_if
comp_for: [ASYNC] 'for' exprlist 'in' or_test [comp_iter]
comp_if: 'if' old_test [comp_iter]

# As noted above, testlist_safe extends the syntax allowed in list
# comprehensions and generators. We can't use it indiscriminately in all
# derivations using a comp_for-like pattern because the testlist_safe derivation
# contains comma which clashes with trailing comma in arglist.
#
# This was an issue because the parser would not follow the correct derivation
# when parsing syntactically valid Python code. Since testlist_safe was created
# specifically to handle list comprehensions and generator expressions enclosed
# with parentheses, it's safe to only use it in those. That avoids the issue; we
# can parse code like set(x for x in [],).
#
# The syntax supported by this set of rules is not a valid Python 3 syntax,
# hence the prefix "old".
#
# See https://bugs.python.org/issue27494
old_comp_iter: old_comp_for | old_comp_if
old_comp_for: [ASYNC] 'for' exprlist 'in' testlist_safe [old_comp_iter]
old_comp_if: 'if' old_test [old_comp_iter]

testlist1: test (',' test)*

# not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME

yield_expr: 'yield' [yield_arg]
yield_arg: 'from' test | testlist
